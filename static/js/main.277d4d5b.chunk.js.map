{"version":3,"sources":["utils.js","Checkbox.js","Teams.js","App.js","index.js"],"names":["eqSet","as","bs","size","a","has","Checkbox","label","onChange","className","name","type","key","Teams","team1","team2","team1Score","team2Score","map","player","App","props","state","playerRanks","selectedPlayers","Set","teams","errorMsg","handleCheckboxChanged","bind","generateTeams","e","target","this","delete","add","setState","Array","from","length","teamLength","Math","ceil","sourceArray","comboLength","sourceLength","combos","makeNextCombos","workingCombo","currentIndex","remainingCount","oneAwayFromComboLength","sourceIndex","next","push","generateCombinations","teamsAndScores","addedTeams","firstTeam","array","targetSet","arrayContainsSet","opponentTeam","filter","includes","firstTeamScore","reduce","acc","currentPlayer","parseInt","window","atob","opponentTeamScore","scoreDiff","abs","sortedTeams","sort","b","Object","keys","onClick","slice","team","index","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.277d4d5b.chunk.js","sourcesContent":["/**\n * Stolen from here: https://stackoverflow.com/questions/43241174/javascript-generating-all-combinations-of-elements-in-a-single-array-in-pairs\n *\n * Generate all combinations of an array.\n * @param {Array} sourceArray - Array of input elements.\n * @param {number} comboLength - Desired length of combinations.\n * @return {Array} Array of combination arrays.\n */\nexport function generateCombinations(sourceArray, comboLength) {\n  const sourceLength = sourceArray.length;\n  if (comboLength > sourceLength) return [];\n  const combos = []; // Stores valid combinations as they are generated.\n  // Accepts a partial combination, an index into sourceArray, \n  // and the number of elements required to be added to create a full-length combination.\n  // Called recursively to build combinations, adding subsequent elements at each call depth.\n  const makeNextCombos = (workingCombo, currentIndex, remainingCount) => {\n    const oneAwayFromComboLength = remainingCount === 1;\n    // For each element that remaines to be added to the working combination.\n    for (let sourceIndex = currentIndex; sourceIndex < sourceLength; sourceIndex++) {\n      // Get next (possibly partial) combination.\n      const next = [ ...workingCombo, sourceArray[sourceIndex] ];\n      if (oneAwayFromComboLength) {\n        // Combo of right length found, save it.\n        combos.push(next);\n      }\n      else {\n        // Otherwise go deeper to add more elements to the current partial combination.\n        makeNextCombos(next, sourceIndex + 1, remainingCount - 1);\n      }\n        }\n  }\n  makeNextCombos([], 0, comboLength);\n  return combos;\n}\n\n/*\n * Stolen from https://stackoverflow.com/questions/31128855/comparing-ecma6-sets-for-equality\n *\n * Checks if two sets are equal.\n *\n */\nfunction eqSet(as, bs) {\n    if (as.size !== bs.size) return false;\n    for (var a of as) if (!bs.has(a)) return false;\n    return true;\n}\n\nexport function arrayContainsSet(array, targetSet) {\n  for (let set of array) {\n    if (eqSet(set, targetSet)) {\n      return true\n    }\n  }\n  return false\n}","import React from 'react';\nimport './Checkbox.css';\n\nexport default function Checkbox({ label, onChange }) {\n  return (\n    <div className=\"checkbox-container\">\n      <label>\n        <input \n          name={label} \n          type=\"checkbox\"\n          key={label}\n          onChange={onChange}\n        />\n        {label}\n      </label>\n    </div>\n  )\n}","import React from 'react';\nimport './Teams.css';\n\nexport default function Teams({ team1, team2, team1Score, team2Score }) {\n  return (\n    <div>\n      <div className=\"teams-container\">\n        <div className=\"team-container\">\n          <h3>Team 1</h3>\n          <p>Score: {team1Score}</p>\n          {team1.map(player => <div key={player}>{player}</div>)}\n        </div>\n        <div className=\"team-container\">\n          <h3>Team 2</h3>\n          <p>Score: {team2Score}</p>\n          {team2.map(player => <div key={player}>{player}</div>)}\n        </div>\n      </div>\n    </div>\n  )\n}","import React, { Component } from 'react';\nimport './App.css';\nimport { generateCombinations, arrayContainsSet } from './utils.js'\nimport Checkbox from './Checkbox.js'\nimport Teams from './Teams.js'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      playerRanks: { // encoded for confidentiality :)\n        \"MÃ¤rta-Louise\": \"MTM=\",\n        \"Sheppan\": \"MTA1\",\n        \"Zuccan\": \"NzM=\",\n        \"BoranHeaton\": \"MjA=\",\n        \"Limpan\": \"NDM=\",\n        \"Suppe\": \"MTIx\",\n        \"Magg0t\": \"OTM=\",\n        \"Mouth\": \"NDM=\",\n        \"Oezt\": \"MjQ=\",\n        \"BigB\": \"NDM=\",\n        \"Ankan\": \"NjA=\",\n        \"Widiz\": \"NDM=\",\n        \"Tracer\": \"OTU=\",\n        \"Heimdall\": \"MzQ=\",\n        \"Steffe\": \"NQ==\",\n        \"Mg0\": \"ODg=\"\n      },\n      selectedPlayers: new Set(),\n      teams: [],\n      errorMsg: \"\"\n    }\n\n    this.handleCheckboxChanged = this.handleCheckboxChanged.bind(this)\n    this.generateTeams = this.generateTeams.bind(this)\n  }\n\n  handleCheckboxChanged(e) {\n    const player = e.target.name\n    const { selectedPlayers } = this.state\n    if (selectedPlayers.has(player)) {\n      selectedPlayers.delete(player);\n    } else {\n      selectedPlayers.add(player);\n    }\n    this.setState({\n      selectedPlayers\n    })\n  }\n\n  generateTeams() {\n    const selectedPlayers = Array.from(this.state.selectedPlayers)\n\n    if (selectedPlayers.length < 4) {\n      this.setState({\n        errorMsg: \"Select at least four players!\"\n      })\n      return\n    }\n    this.setState({\n      errorMsg: \"\"\n    })\n\n    // generate all possible team combinations\n    const teamLength = Math.ceil(selectedPlayers.length / 2)\n    const teams = generateCombinations(selectedPlayers, teamLength)\n    \n    // calculate team scores\n    const teamsAndScores = []\n    const addedTeams = []\n    for (let firstTeam of teams) {\n      if (arrayContainsSet(addedTeams, new Set(firstTeam))) {\n        continue\n      }\n\n      // get opponent team\n      const opponentTeam = selectedPlayers.filter(player => !firstTeam.includes(player))\n      \n      // calculate team scores\n      const firstTeamScore = firstTeam.reduce((acc, currentPlayer) => acc + parseInt(window.atob(this.state.playerRanks[currentPlayer])), 0)\n      const opponentTeamScore = opponentTeam.reduce((acc, currentPlayer) => acc + parseInt(window.atob(this.state.playerRanks[currentPlayer])), 0)\n      const scoreDiff = Math.abs(firstTeamScore - opponentTeamScore)\n\n      teamsAndScores.push([[firstTeam, firstTeamScore], [opponentTeam, opponentTeamScore], scoreDiff])\n      addedTeams.push(new Set(firstTeam))\n      addedTeams.push(new Set(opponentTeam))\n    }\n\n    // sort teams by ascending score difference\n    const sortedTeams = teamsAndScores.sort((a, b) => a[2] - b[2])\n    this.setState({\n      teams: sortedTeams\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"header\">\n          <h1>CS Team Generator</h1>\n        </div>\n        <div className=\"content\">\n          <h2>Select players</h2>\n          <p>Selected players will be divided into two equally strong teams. Click \"Generate Teams!\" button and team suggestions will be presented below.</p>\n          <div className=\"checkboxes-container\">\n            {Object.keys(this.state.playerRanks).map(player => <Checkbox \n                label={player}\n                key={player}\n                onChange={this.handleCheckboxChanged}\n              />\n            )}\n          </div>\n          <button onClick={this.generateTeams}>Generate Teams!</button>\n          {this.state.teams.length > 0 &&\n            <div>\n              <h2>Team suggestions</h2>\n              <p>Team suggestions are sorted with the most equal teams on top, followed by the second most equal teams, etc.</p>\n              {this.state.teams.slice(0, 10).map((team, index) => \n                <Teams \n                  key={index}\n                  team1={team[0][0]}\n                  team1Score={team[0][1]}\n                  team2={team[1][0]}\n                  team2Score={team[1][1]}\n                />\n              )}\n            </div>\n          }\n          {this.state.errorMsg !== \"\" &&\n            <p className=\"error-msg\">{this.state.errorMsg}</p>\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}